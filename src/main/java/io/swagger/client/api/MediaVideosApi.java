/**
 * Knetik Platform API Documentation Latest
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.CommentResource;
import io.swagger.client.model.ContributionResource;
import io.swagger.client.model.DispositionResource;
import io.swagger.client.model.FlagResource;
import io.swagger.client.model.PageResourceCommentResource;
import io.swagger.client.model.PageResourceDispositionResource;
import io.swagger.client.model.PageResourceVideoRelationshipResource;
import io.swagger.client.model.PageResourceVideoResource;
import io.swagger.client.model.VideoRelationshipResource;
import io.swagger.client.model.VideoResource;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class MediaVideosApi {
  String basePath = "https://localhost:8080/";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Add a new video comment
  * 
   * @param videoId The video id 
   * @param commentResource The comment object
   * @return CommentResource
  */
  public CommentResource addCommentUsingPOST1 (Integer videoId, CommentResource commentResource) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = commentResource;
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling addCommentUsingPOST1",
        new ApiException(400, "Missing the required parameter 'videoId' when calling addCommentUsingPOST1"));
    }

    // create path and map variables
    String path = "/media/videos/{video_id}/comments".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "knetik_oauth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CommentResource) ApiInvoker.deserialize(localVarResponse, "", CommentResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Add a new video comment
   * 
   * @param videoId The video id    * @param commentResource The comment object
  */
  public void addCommentUsingPOST1 (Integer videoId, CommentResource commentResource, final Response.Listener<CommentResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = commentResource;

  
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling addCommentUsingPOST1",
         new ApiException(400, "Missing the required parameter 'videoId' when calling addCommentUsingPOST1"));
    }
    

    // create path and map variables
    String path = "/media/videos/{video_id}/comments".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "knetik_oauth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CommentResource) ApiInvoker.deserialize(localVarResponse,  "", CommentResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Adds a contributor to a video
  * 
   * @param videoId The video id
   * @param contributionResource The contribution object
   * @return void
  */
  public void addContributorUsingPOST (Long videoId, ContributionResource contributionResource) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = contributionResource;
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling addContributorUsingPOST",
        new ApiException(400, "Missing the required parameter 'videoId' when calling addContributorUsingPOST"));
    }

    // create path and map variables
    String path = "/media/videos/{video_id}/contributors".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "knetik_oauth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Adds a contributor to a video
   * 
   * @param videoId The video id   * @param contributionResource The contribution object
  */
  public void addContributorUsingPOST (Long videoId, ContributionResource contributionResource, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = contributionResource;

  
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling addContributorUsingPOST",
         new ApiException(400, "Missing the required parameter 'videoId' when calling addContributorUsingPOST"));
    }
    

    // create path and map variables
    String path = "/media/videos/{video_id}/contributors".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "knetik_oauth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Add a new Video disposition
  * 
   * @param videoId The video id
   * @param dispositionResource The disposition object
   * @return DispositionResource
  */
  public DispositionResource addDispositionUsingPOST1 (Integer videoId, DispositionResource dispositionResource) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = dispositionResource;
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling addDispositionUsingPOST1",
        new ApiException(400, "Missing the required parameter 'videoId' when calling addDispositionUsingPOST1"));
    }

    // create path and map variables
    String path = "/media/videos/{video_id}/dispositions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "knetik_oauth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DispositionResource) ApiInvoker.deserialize(localVarResponse, "", DispositionResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Add a new Video disposition
   * 
   * @param videoId The video id   * @param dispositionResource The disposition object
  */
  public void addDispositionUsingPOST1 (Integer videoId, DispositionResource dispositionResource, final Response.Listener<DispositionResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = dispositionResource;

  
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling addDispositionUsingPOST1",
         new ApiException(400, "Missing the required parameter 'videoId' when calling addDispositionUsingPOST1"));
    }
    

    // create path and map variables
    String path = "/media/videos/{video_id}/dispositions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "knetik_oauth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DispositionResource) ApiInvoker.deserialize(localVarResponse,  "", DispositionResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Add a new flag
  * 
   * @param videoId The video id
   * @param reason The flag reason
   * @return void
  */
  public void addFlagUsingPOST (Long videoId, String reason) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = reason;
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling addFlagUsingPOST",
        new ApiException(400, "Missing the required parameter 'videoId' when calling addFlagUsingPOST"));
    }

    // create path and map variables
    String path = "/media/videos/{video_id}/moderation".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "knetik_oauth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Add a new flag
   * 
   * @param videoId The video id   * @param reason The flag reason
  */
  public void addFlagUsingPOST (Long videoId, String reason, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = reason;

  
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling addFlagUsingPOST",
         new ApiException(400, "Missing the required parameter 'videoId' when calling addFlagUsingPOST"));
    }
    

    // create path and map variables
    String path = "/media/videos/{video_id}/moderation".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "knetik_oauth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Adds one or more existing videos as related to this one
  * 
   * @param videoId The video id
   * @param videoRelationshipResource The video relationship object 
   * @return VideoRelationshipResource
  */
  public VideoRelationshipResource addRelatedUsingPOST (Long videoId, VideoRelationshipResource videoRelationshipResource) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = videoRelationshipResource;
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling addRelatedUsingPOST",
        new ApiException(400, "Missing the required parameter 'videoId' when calling addRelatedUsingPOST"));
    }

    // create path and map variables
    String path = "/media/videos/{video_id}/related".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "knetik_oauth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (VideoRelationshipResource) ApiInvoker.deserialize(localVarResponse, "", VideoRelationshipResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Adds one or more existing videos as related to this one
   * 
   * @param videoId The video id   * @param videoRelationshipResource The video relationship object 
  */
  public void addRelatedUsingPOST (Long videoId, VideoRelationshipResource videoRelationshipResource, final Response.Listener<VideoRelationshipResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = videoRelationshipResource;

  
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling addRelatedUsingPOST",
         new ApiException(400, "Missing the required parameter 'videoId' when calling addRelatedUsingPOST"));
    }
    

    // create path and map variables
    String path = "/media/videos/{video_id}/related".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "knetik_oauth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((VideoRelationshipResource) ApiInvoker.deserialize(localVarResponse,  "", VideoRelationshipResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Adds a new video in the system
  * 
   * @param videoResource The video object
   * @return VideoResource
  */
  public VideoResource addVideoUsingPOST (VideoResource videoResource) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = videoResource;

    // create path and map variables
    String path = "/media/videos".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "knetik_oauth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (VideoResource) ApiInvoker.deserialize(localVarResponse, "", VideoResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Adds a new video in the system
   * 
   * @param videoResource The video object
  */
  public void addVideoUsingPOST (VideoResource videoResource, final Response.Listener<VideoResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = videoResource;

  

    // create path and map variables
    String path = "/media/videos".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "knetik_oauth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((VideoResource) ApiInvoker.deserialize(localVarResponse,  "", VideoResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Adds a user to a video&#39;s whitelist
  * Whitelisted users can view video regardless of privacy setting.
   * @param id The video id
   * @param userId The user id
   * @return void
  */
  public void addWhitelistUsingPOST (Long id, Integer userId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = userId;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling addWhitelistUsingPOST",
        new ApiException(400, "Missing the required parameter 'id' when calling addWhitelistUsingPOST"));
    }

    // create path and map variables
    String path = "/media/videos/{id}/whitelist".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "knetik_oauth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Adds a user to a video&#39;s whitelist
   * Whitelisted users can view video regardless of privacy setting.
   * @param id The video id   * @param userId The user id
  */
  public void addWhitelistUsingPOST (Long id, Integer userId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = userId;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling addWhitelistUsingPOST",
         new ApiException(400, "Missing the required parameter 'id' when calling addWhitelistUsingPOST"));
    }
    

    // create path and map variables
    String path = "/media/videos/{id}/whitelist".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "knetik_oauth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete a video comment
  * 
   * @param videoId The video id
   * @param id The comment id
   * @return void
  */
  public void deleteCommentUsingDELETE1 (Long videoId, Long id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling deleteCommentUsingDELETE1",
        new ApiException(400, "Missing the required parameter 'videoId' when calling deleteCommentUsingDELETE1"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteCommentUsingDELETE1",
        new ApiException(400, "Missing the required parameter 'id' when calling deleteCommentUsingDELETE1"));
    }

    // create path and map variables
    String path = "/media/videos/{video_id}/comments/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "knetik_oauth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Delete a video comment
   * 
   * @param videoId The video id   * @param id The comment id
  */
  public void deleteCommentUsingDELETE1 (Long videoId, Long id, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling deleteCommentUsingDELETE1",
         new ApiException(400, "Missing the required parameter 'videoId' when calling deleteCommentUsingDELETE1"));
    }
    
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteCommentUsingDELETE1",
         new ApiException(400, "Missing the required parameter 'id' when calling deleteCommentUsingDELETE1"));
    }
    

    // create path and map variables
    String path = "/media/videos/{video_id}/comments/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "knetik_oauth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete a video comment
  * 
   * @param dispositionId The disposition id
   * @return void
  */
  public void deleteDispositionUsingDELETE1 (Long dispositionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'dispositionId' is set
    if (dispositionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dispositionId' when calling deleteDispositionUsingDELETE1",
        new ApiException(400, "Missing the required parameter 'dispositionId' when calling deleteDispositionUsingDELETE1"));
    }

    // create path and map variables
    String path = "/media/videos/{video_id}/dispositions/{disposition_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "disposition_id" + "\\}", apiInvoker.escapeString(dispositionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "knetik_oauth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Delete a video comment
   * 
   * @param dispositionId The disposition id
  */
  public void deleteDispositionUsingDELETE1 (Long dispositionId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'dispositionId' is set
    if (dispositionId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'dispositionId' when calling deleteDispositionUsingDELETE1",
         new ApiException(400, "Missing the required parameter 'dispositionId' when calling deleteDispositionUsingDELETE1"));
    }
    

    // create path and map variables
    String path = "/media/videos/{video_id}/dispositions/{disposition_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "disposition_id" + "\\}", apiInvoker.escapeString(dispositionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "knetik_oauth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete a flag
  * 
   * @param videoId The video id
   * @return void
  */
  public void deleteFlagUsingDELETE (Long videoId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling deleteFlagUsingDELETE",
        new ApiException(400, "Missing the required parameter 'videoId' when calling deleteFlagUsingDELETE"));
    }

    // create path and map variables
    String path = "/media/videos/{video_id}/moderation".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "knetik_oauth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Delete a flag
   * 
   * @param videoId The video id
  */
  public void deleteFlagUsingDELETE (Long videoId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling deleteFlagUsingDELETE",
         new ApiException(400, "Missing the required parameter 'videoId' when calling deleteFlagUsingDELETE"));
    }
    

    // create path and map variables
    String path = "/media/videos/{video_id}/moderation".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "knetik_oauth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete a video&#39;s relationship
  * 
   * @param videoId The video id
   * @param id The relationship id
   * @return void
  */
  public void deleteRelationshipUsingDELETE1 (Long videoId, Long id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling deleteRelationshipUsingDELETE1",
        new ApiException(400, "Missing the required parameter 'videoId' when calling deleteRelationshipUsingDELETE1"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteRelationshipUsingDELETE1",
        new ApiException(400, "Missing the required parameter 'id' when calling deleteRelationshipUsingDELETE1"));
    }

    // create path and map variables
    String path = "/media/videos/{video_id}/related/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "knetik_oauth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Delete a video&#39;s relationship
   * 
   * @param videoId The video id   * @param id The relationship id
  */
  public void deleteRelationshipUsingDELETE1 (Long videoId, Long id, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling deleteRelationshipUsingDELETE1",
         new ApiException(400, "Missing the required parameter 'videoId' when calling deleteRelationshipUsingDELETE1"));
    }
    
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteRelationshipUsingDELETE1",
         new ApiException(400, "Missing the required parameter 'id' when calling deleteRelationshipUsingDELETE1"));
    }
    

    // create path and map variables
    String path = "/media/videos/{video_id}/related/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "knetik_oauth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Removes a video from the system if no resources are attached to it
  * 
   * @param id The video id
   * @return void
  */
  public void deleteVideoUsingDELETE (Long id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteVideoUsingDELETE",
        new ApiException(400, "Missing the required parameter 'id' when calling deleteVideoUsingDELETE"));
    }

    // create path and map variables
    String path = "/media/videos/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "knetik_oauth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Removes a video from the system if no resources are attached to it
   * 
   * @param id The video id
  */
  public void deleteVideoUsingDELETE (Long id, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteVideoUsingDELETE",
         new ApiException(400, "Missing the required parameter 'id' when calling deleteVideoUsingDELETE"));
    }
    

    // create path and map variables
    String path = "/media/videos/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "knetik_oauth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns a page of comments for a video
  * 
   * @param videoId The video id
   * @param size The number of objects returned per page
   * @param page The number of the page returned, starting with 1
   * @return PageResourceCommentResource
  */
  public PageResourceCommentResource getCommentsUsingGET1 (Integer videoId, Integer size, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling getCommentsUsingGET1",
        new ApiException(400, "Missing the required parameter 'videoId' when calling getCommentsUsingGET1"));
    }

    // create path and map variables
    String path = "/media/videos/{video_id}/comments".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PageResourceCommentResource) ApiInvoker.deserialize(localVarResponse, "", PageResourceCommentResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Returns a page of comments for a video
   * 
   * @param videoId The video id   * @param size The number of objects returned per page   * @param page The number of the page returned, starting with 1
  */
  public void getCommentsUsingGET1 (Integer videoId, Integer size, Integer page, final Response.Listener<PageResourceCommentResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling getCommentsUsingGET1",
         new ApiException(400, "Missing the required parameter 'videoId' when calling getCommentsUsingGET1"));
    }
    

    // create path and map variables
    String path = "/media/videos/{video_id}/comments".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PageResourceCommentResource) ApiInvoker.deserialize(localVarResponse,  "", PageResourceCommentResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns a page of dispositions for a video
  * 
   * @param videoId The video id
   * @param size The number of objects returned per page
   * @param page The number of the page returned, starting with 1
   * @return PageResourceDispositionResource
  */
  public PageResourceDispositionResource getDispositionsUsingGET1 (Integer videoId, Integer size, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling getDispositionsUsingGET1",
        new ApiException(400, "Missing the required parameter 'videoId' when calling getDispositionsUsingGET1"));
    }

    // create path and map variables
    String path = "/media/videos/{video_id}/dispositions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PageResourceDispositionResource) ApiInvoker.deserialize(localVarResponse, "", PageResourceDispositionResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Returns a page of dispositions for a video
   * 
   * @param videoId The video id   * @param size The number of objects returned per page   * @param page The number of the page returned, starting with 1
  */
  public void getDispositionsUsingGET1 (Integer videoId, Integer size, Integer page, final Response.Listener<PageResourceDispositionResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling getDispositionsUsingGET1",
         new ApiException(400, "Missing the required parameter 'videoId' when calling getDispositionsUsingGET1"));
    }
    

    // create path and map variables
    String path = "/media/videos/{video_id}/dispositions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PageResourceDispositionResource) ApiInvoker.deserialize(localVarResponse,  "", PageResourceDispositionResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns a page of video relationships
  * 
   * @param videoId The video id
   * @param size The number of objects returned per page
   * @param page The number of the page returned, starting with 1
   * @return PageResourceVideoRelationshipResource
  */
  public PageResourceVideoRelationshipResource getRelatedUsingGET (Long videoId, Integer size, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling getRelatedUsingGET",
        new ApiException(400, "Missing the required parameter 'videoId' when calling getRelatedUsingGET"));
    }

    // create path and map variables
    String path = "/media/videos/{video_id}/related".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PageResourceVideoRelationshipResource) ApiInvoker.deserialize(localVarResponse, "", PageResourceVideoRelationshipResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Returns a page of video relationships
   * 
   * @param videoId The video id   * @param size The number of objects returned per page   * @param page The number of the page returned, starting with 1
  */
  public void getRelatedUsingGET (Long videoId, Integer size, Integer page, final Response.Listener<PageResourceVideoRelationshipResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling getRelatedUsingGET",
         new ApiException(400, "Missing the required parameter 'videoId' when calling getRelatedUsingGET"));
    }
    

    // create path and map variables
    String path = "/media/videos/{video_id}/related".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PageResourceVideoRelationshipResource) ApiInvoker.deserialize(localVarResponse,  "", PageResourceVideoRelationshipResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get user videos
  * 
   * @param userId The user id
   * @param excludeFlagged Skip videos that have been flagged by the current user
   * @param size The number of objects returned per page
   * @param page The number of the page returned, starting with 1
   * @return PageResourceVideoResource
  */
  public PageResourceVideoResource getUserVideosUsingGET (Integer userId, Boolean excludeFlagged, Integer size, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling getUserVideosUsingGET",
        new ApiException(400, "Missing the required parameter 'userId' when calling getUserVideosUsingGET"));
    }

    // create path and map variables
    String path = "/users/{user_id}/videos".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude_flagged", excludeFlagged));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "knetik_oauth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PageResourceVideoResource) ApiInvoker.deserialize(localVarResponse, "", PageResourceVideoResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Get user videos
   * 
   * @param userId The user id   * @param excludeFlagged Skip videos that have been flagged by the current user   * @param size The number of objects returned per page   * @param page The number of the page returned, starting with 1
  */
  public void getUserVideosUsingGET (Integer userId, Boolean excludeFlagged, Integer size, Integer page, final Response.Listener<PageResourceVideoResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'userId' is set
    if (userId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling getUserVideosUsingGET",
         new ApiException(400, "Missing the required parameter 'userId' when calling getUserVideosUsingGET"));
    }
    

    // create path and map variables
    String path = "/users/{user_id}/videos".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude_flagged", excludeFlagged));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "knetik_oauth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PageResourceVideoResource) ApiInvoker.deserialize(localVarResponse,  "", PageResourceVideoResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Loads a specific video details
  * 
   * @param id The video id
   * @return VideoResource
  */
  public VideoResource getVideoUsingGET (Long id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getVideoUsingGET",
        new ApiException(400, "Missing the required parameter 'id' when calling getVideoUsingGET"));
    }

    // create path and map variables
    String path = "/media/videos/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "knetik_oauth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (VideoResource) ApiInvoker.deserialize(localVarResponse, "", VideoResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Loads a specific video details
   * 
   * @param id The video id
  */
  public void getVideoUsingGET (Long id, final Response.Listener<VideoResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getVideoUsingGET",
         new ApiException(400, "Missing the required parameter 'id' when calling getVideoUsingGET"));
    }
    

    // create path and map variables
    String path = "/media/videos/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "knetik_oauth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((VideoResource) ApiInvoker.deserialize(localVarResponse,  "", VideoResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Removes a contributor from a video
  * 
   * @param videoId The video id
   * @param id The contributor id
   * @return void
  */
  public void removeContributorUsingDELETE (Long videoId, Integer id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling removeContributorUsingDELETE",
        new ApiException(400, "Missing the required parameter 'videoId' when calling removeContributorUsingDELETE"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling removeContributorUsingDELETE",
        new ApiException(400, "Missing the required parameter 'id' when calling removeContributorUsingDELETE"));
    }

    // create path and map variables
    String path = "/media/videos/{video_id}/contributors/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "knetik_oauth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Removes a contributor from a video
   * 
   * @param videoId The video id   * @param id The contributor id
  */
  public void removeContributorUsingDELETE (Long videoId, Integer id, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling removeContributorUsingDELETE",
         new ApiException(400, "Missing the required parameter 'videoId' when calling removeContributorUsingDELETE"));
    }
    
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling removeContributorUsingDELETE",
         new ApiException(400, "Missing the required parameter 'id' when calling removeContributorUsingDELETE"));
    }
    

    // create path and map variables
    String path = "/media/videos/{video_id}/contributors/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "knetik_oauth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Removes a user from a video&#39;s whitelist
  * Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting.
   * @param videoId The video id
   * @param id The user id
   * @return void
  */
  public void removeWhitelistUsingDELETE (Long videoId, Integer id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling removeWhitelistUsingDELETE",
        new ApiException(400, "Missing the required parameter 'videoId' when calling removeWhitelistUsingDELETE"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling removeWhitelistUsingDELETE",
        new ApiException(400, "Missing the required parameter 'id' when calling removeWhitelistUsingDELETE"));
    }

    // create path and map variables
    String path = "/media/videos/{video_id}/whitelist/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "knetik_oauth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Removes a user from a video&#39;s whitelist
   * Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting.
   * @param videoId The video id   * @param id The user id
  */
  public void removeWhitelistUsingDELETE (Long videoId, Integer id, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling removeWhitelistUsingDELETE",
         new ApiException(400, "Missing the required parameter 'videoId' when calling removeWhitelistUsingDELETE"));
    }
    
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling removeWhitelistUsingDELETE",
         new ApiException(400, "Missing the required parameter 'id' when calling removeWhitelistUsingDELETE"));
    }
    

    // create path and map variables
    String path = "/media/videos/{video_id}/whitelist/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "knetik_oauth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Search videos using the documented filters
  * 
   * @param excludeFlagged Skip videos that have been flagged by the current user
   * @param filterVideosByUploader Filter for videos by uploader id
   * @param filterCategory Filter for videos from a specific category by id
   * @param filterTagset Filter for videos with specified tags (separated by comma)
   * @param filterVideosByName Filter for videos which name *STARTS* with the given string
   * @param filterVideosByContributor Filter for videos with contribution from the artist specified by ID
   * @param filterVideosByAuthor Filter for videos with an artist as author specified by ID
   * @param filterHasAuthor Filter for videos that have an author set if true, or that have no author if false
   * @param filterHasUploader Filter for videos that have an uploader set if true, or that have no uploader if false
   * @param filterRelatedTo Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well
   * @param filterFriends Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission)
   * @param filterDisposition Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite
   * @param size The number of objects returned per page
   * @param page The number of the page returned, starting with 1
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
   * @return PageResourceVideoResource
  */
  public PageResourceVideoResource searchVideosUsingGET (Boolean excludeFlagged, String filterVideosByUploader, String filterCategory, String filterTagset, String filterVideosByName, String filterVideosByContributor, String filterVideosByAuthor, Boolean filterHasAuthor, Boolean filterHasUploader, String filterRelatedTo, Boolean filterFriends, String filterDisposition, Integer size, Integer page, String order) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/media/videos".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude_flagged", excludeFlagged));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_videos_by_uploader", filterVideosByUploader));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_category", filterCategory));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_tagset", filterTagset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_videos_by_name", filterVideosByName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_videos_by_contributor", filterVideosByContributor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_videos_by_author", filterVideosByAuthor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_has_author", filterHasAuthor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_has_uploader", filterHasUploader));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_related_to", filterRelatedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_friends", filterFriends));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_disposition", filterDisposition));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PageResourceVideoResource) ApiInvoker.deserialize(localVarResponse, "", PageResourceVideoResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Search videos using the documented filters
   * 
   * @param excludeFlagged Skip videos that have been flagged by the current user   * @param filterVideosByUploader Filter for videos by uploader id   * @param filterCategory Filter for videos from a specific category by id   * @param filterTagset Filter for videos with specified tags (separated by comma)   * @param filterVideosByName Filter for videos which name *STARTS* with the given string   * @param filterVideosByContributor Filter for videos with contribution from the artist specified by ID   * @param filterVideosByAuthor Filter for videos with an artist as author specified by ID   * @param filterHasAuthor Filter for videos that have an author set if true, or that have no author if false   * @param filterHasUploader Filter for videos that have an uploader set if true, or that have no uploader if false   * @param filterRelatedTo Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well   * @param filterFriends Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission)   * @param filterDisposition Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite   * @param size The number of objects returned per page   * @param page The number of the page returned, starting with 1   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
  */
  public void searchVideosUsingGET (Boolean excludeFlagged, String filterVideosByUploader, String filterCategory, String filterTagset, String filterVideosByName, String filterVideosByContributor, String filterVideosByAuthor, Boolean filterHasAuthor, Boolean filterHasUploader, String filterRelatedTo, Boolean filterFriends, String filterDisposition, Integer size, Integer page, String order, final Response.Listener<PageResourceVideoResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/media/videos".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude_flagged", excludeFlagged));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_videos_by_uploader", filterVideosByUploader));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_category", filterCategory));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_tagset", filterTagset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_videos_by_name", filterVideosByName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_videos_by_contributor", filterVideosByContributor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_videos_by_author", filterVideosByAuthor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_has_author", filterHasAuthor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_has_uploader", filterHasUploader));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_related_to", filterRelatedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_friends", filterFriends));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_disposition", filterDisposition));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PageResourceVideoResource) ApiInvoker.deserialize(localVarResponse,  "", PageResourceVideoResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update video comment content 
  * 
   * @param videoId The video id
   * @param id The comment id
   * @param content The comment content
   * @return void
  */
  public void updateCommentUsingPUT1 (Long videoId, Long id, String content) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = content;
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling updateCommentUsingPUT1",
        new ApiException(400, "Missing the required parameter 'videoId' when calling updateCommentUsingPUT1"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateCommentUsingPUT1",
        new ApiException(400, "Missing the required parameter 'id' when calling updateCommentUsingPUT1"));
    }

    // create path and map variables
    String path = "/media/videos/{video_id}/comments/{id}/content".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "knetik_oauth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Update video comment content 
   * 
   * @param videoId The video id   * @param id The comment id   * @param content The comment content
  */
  public void updateCommentUsingPUT1 (Long videoId, Long id, String content, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = content;

  
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling updateCommentUsingPUT1",
         new ApiException(400, "Missing the required parameter 'videoId' when calling updateCommentUsingPUT1"));
    }
    
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateCommentUsingPUT1",
         new ApiException(400, "Missing the required parameter 'id' when calling updateCommentUsingPUT1"));
    }
    

    // create path and map variables
    String path = "/media/videos/{video_id}/comments/{id}/content".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "knetik_oauth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update a video&#39;s relationship details
  * 
   * @param videoId The video id
   * @param relationshipId The relationship id
   * @param details The video relationship details
   * @return void
  */
  public void updateRelationshipUsingPUT1 (Long videoId, Long relationshipId, String details) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = details;
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling updateRelationshipUsingPUT1",
        new ApiException(400, "Missing the required parameter 'videoId' when calling updateRelationshipUsingPUT1"));
    }
    // verify the required parameter 'relationshipId' is set
    if (relationshipId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'relationshipId' when calling updateRelationshipUsingPUT1",
        new ApiException(400, "Missing the required parameter 'relationshipId' when calling updateRelationshipUsingPUT1"));
    }

    // create path and map variables
    String path = "/media/videos/{video_id}/related/{id}/relationship_details".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString())).replaceAll("\\{" + "relationship_id" + "\\}", apiInvoker.escapeString(relationshipId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "knetik_oauth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Update a video&#39;s relationship details
   * 
   * @param videoId The video id   * @param relationshipId The relationship id   * @param details The video relationship details
  */
  public void updateRelationshipUsingPUT1 (Long videoId, Long relationshipId, String details, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = details;

  
    // verify the required parameter 'videoId' is set
    if (videoId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'videoId' when calling updateRelationshipUsingPUT1",
         new ApiException(400, "Missing the required parameter 'videoId' when calling updateRelationshipUsingPUT1"));
    }
    
    // verify the required parameter 'relationshipId' is set
    if (relationshipId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'relationshipId' when calling updateRelationshipUsingPUT1",
         new ApiException(400, "Missing the required parameter 'relationshipId' when calling updateRelationshipUsingPUT1"));
    }
    

    // create path and map variables
    String path = "/media/videos/{video_id}/related/{id}/relationship_details".replaceAll("\\{format\\}","json").replaceAll("\\{" + "video_id" + "\\}", apiInvoker.escapeString(videoId.toString())).replaceAll("\\{" + "relationship_id" + "\\}", apiInvoker.escapeString(relationshipId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "knetik_oauth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Modifies a video&#39;s details
  * 
   * @param id The video id
   * @param videoResource The video object
   * @return void
  */
  public void updateVideoUsingPUT (Long id, VideoResource videoResource) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = videoResource;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateVideoUsingPUT",
        new ApiException(400, "Missing the required parameter 'id' when calling updateVideoUsingPUT"));
    }

    // create path and map variables
    String path = "/media/videos/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "knetik_oauth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Modifies a video&#39;s details
   * 
   * @param id The video id   * @param videoResource The video object
  */
  public void updateVideoUsingPUT (Long id, VideoResource videoResource, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = videoResource;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateVideoUsingPUT",
         new ApiException(400, "Missing the required parameter 'id' when calling updateVideoUsingPUT"));
    }
    

    // create path and map variables
    String path = "/media/videos/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "knetik_oauth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Increment a video&#39;s view count
  * 
   * @param id The video id
   * @return void
  */
  public void viewVideoUsingPOST (Long id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling viewVideoUsingPOST",
        new ApiException(400, "Missing the required parameter 'id' when calling viewVideoUsingPOST"));
    }

    // create path and map variables
    String path = "/media/videos/{id}/views".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Increment a video&#39;s view count
   * 
   * @param id The video id
  */
  public void viewVideoUsingPOST (Long id, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling viewVideoUsingPOST",
         new ApiException(400, "Missing the required parameter 'id' when calling viewVideoUsingPOST"));
    }
    

    // create path and map variables
    String path = "/media/videos/{id}/views".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
